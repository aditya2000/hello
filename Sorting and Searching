#include <iostream>
using namespace std;

void allocate(int * & arr, const int & size, bool flag) {
	if (arr == NULL) {
		arr = new int [size];
	}
	else if (flag) {
		delete [] arr;
		arr = new int [size];
	}
}

void enter(int * & arr, const int & size) {
	for (int i = 0; i < size; i++) {
		cin >> arr[i];
	}
}

void display(int * & arr, const int & size) {
	cout << endl;
	for (int i =0; i < size; i++) {
		cout << arr[i] << "\t";
	}
}

void bubbleSort(int * & arr, const int & size) {
	bool flag;
	for (int i = 0; i < size - 1 ; i++) {
		flag = false;
		for (int j = 0; j < size - i - 1; j++) {
			if (arr[j] > arr[j + 1]) {
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
				flag = true;
			}
		}
		if (! flag) {
			break;
		}
	}
}

void selectionSort(int * & arr, const int & size) {
	for (int i = 0; i < size - 1; i++) {
		int index = i;
		int min = arr[i];
		for (int j = i + 1 ; j < size; j++) {
			if (arr[j] > min) {
				index = j;
				min = arr[j];
			} 
		}
		int temp = arr[i];
		arr[i] = arr[index];
		arr[index] = temp;
	}
}

void insertionSort(int * & arr, const int & size) {
	for (int i = 1; i < size; i++) {
		int min = arr[i];
		int j = i - 1;
		while (arr[j] > min && j >= 0) {
			arr[j + 1] = arr[j];
			j--;
		}
		arr[j + 1] =min;
	}
}

int linearSearch(int * & arr, const int & size, const int & ele) {
	bool flag = true;
	int i = 0;
	while (i < size && flag) {
		if (arr[i] == ele) {
			flag = false;
		}
		i++;
	}
	if (flag) {
		i = -1;
	}
	else {
		i --;
	}
	return i;
}

int binarySearch(int * & arr, const int & size, const int & ele) {
	int first, last;
	first = 0;
	last = size - 1;
	int mid;
	bool flag = true;
	while (first <= last && flag) {
		mid = (first + last) / 2;
		if (arr[mid] == ele) {
			flag = false;
		}
		else if (arr[mid] > ele) {
			last = mid - 1;
		}
		else if (arr[mid] < ele) {
			first = mid + 1;
		}
	}
	if (flag) {
		mid = -1;
	}
	return mid;
}


int main() {
	bool flag1, flag2, flag3, flag4;
	int opt;
	int size, prevSize;
	int * arr = NULL;
	flag1 = flag2 = flag3 = flag4 = true;
	while (flag1) {
		flag1 = flag2 = flag3 = true;
		cout << "\n1.Enter elements.";
		cout << "\n0.Exit.";
		cout << "\nEnter option...";
		cin >> opt;
		switch (opt) {
			case 1: {
				flag3 = true;
				cout << "\nEnter size :";
				cin >> size;
				if (flag4) {
					flag4 = false;
				}
				else if (size == prevSize) {
					flag3 = false;
				}
				allocate(arr, size, flag3);
				prevSize = size;
				cout << "Enter elements :";
				enter(arr, size);
				
				flag2 = true;
				while (flag2) {
					cout << "\n\n1.Bubble sort";
					cout << "\n2.Selection sort";
					cout << "\n3.Insertion sort";
					cout << "\n6.Linear Search.";
					cout << "\n7.Binary Search";
					cout << "\n8.Display";
					cout << "\n9.Previous menu";
					cout << "\n0.Exit";
					cout << "\nEnter option...";
					cin >> opt;
					switch (opt) {
						case 1: {
							bubbleSort(arr, size);
							break;
						}
						
						case 2: {
							selectionSort(arr, size);
							break;
						}
						
						case 3: {
							insertionSort(arr, size);
							break;
						}
						
						case 6: {
							cout << "Enter element to be searched...";
							int ele;
							cin >> ele;
							cout << linearSearch(arr, size, ele);
							break;
						}
						
						case 7: {
							cout << "Enter element to be searched...";
							int ele;
							cin >> ele;
							cout << binarySearch(arr, size, ele);
							break;
						}
						
						case 8: {
							display(arr, size);
							break;
						}
						case 9: {
							flag2 = false;
							break;
						}
						
						case 0: {
							flag2 = flag1 = false;
							break;
						}
					}
				}
				break;
			}
			
			case 0: {
				flag1 = false;
				break;
			}
		}
	}
	
	return 0;
}
